// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	data "github.com/circutor/common-library/pkg/data"
	controller "github.com/circutor/thingsboard-methods/pkg/controller"

	mock "github.com/stretchr/testify/mock"
)

// InterfaceTransversalMock is an autogenerated mock type for the InterfaceTransversal type
type InterfaceTransversalMock struct {
	mock.Mock
}

// ReClaimDevice provides a mock function with given fields: deviceName, token, msg, tb
func (_m *InterfaceTransversalMock) ReClaimDevice(deviceName string, token string, msg string, tb controller.ThingsBoardController) (int, map[string]interface{}, error) {
	ret := _m.Called(deviceName, token, msg, tb)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, string, controller.ThingsBoardController) int); ok {
		r0 = rf(deviceName, token, msg, tb)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string, string, string, controller.ThingsBoardController) map[string]interface{}); ok {
		r1 = rf(deviceName, token, msg, tb)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string, controller.ThingsBoardController) error); ok {
		r2 = rf(deviceName, token, msg, tb)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetAttrDevice provides a mock function with given fields: deviceID, token, msg, tb, _a4
func (_m *InterfaceTransversalMock) SetAttrDevice(deviceID string, token string, msg string, tb controller.ThingsBoardController, _a4 data.InterfaceData) (int, map[string]interface{}, error) {
	ret := _m.Called(deviceID, token, msg, tb, _a4)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, string, controller.ThingsBoardController, data.InterfaceData) int); ok {
		r0 = rf(deviceID, token, msg, tb, _a4)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string, string, string, controller.ThingsBoardController, data.InterfaceData) map[string]interface{}); ok {
		r1 = rf(deviceID, token, msg, tb, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string, controller.ThingsBoardController, data.InterfaceData) error); ok {
		r2 = rf(deviceID, token, msg, tb, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
