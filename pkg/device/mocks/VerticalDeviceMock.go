// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	device "github.com/circutor/common-library/pkg/device"
	mock "github.com/stretchr/testify/mock"
)

// VerticalDeviceMock is an autogenerated mock type for the VerticalDevice type
type VerticalDeviceMock struct {
	mock.Mock
}

// SetAttrClient provides a mock function with given fields: c, microservice
func (_m *VerticalDeviceMock) SetAttrClient(c device.CommonService, microservice string) (int, map[string]interface{}, error) {
	ret := _m.Called(c, microservice)

	var r0 int
	if rf, ok := ret.Get(0).(func(device.CommonService, string) int); ok {
		r0 = rf(c, microservice)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(device.CommonService, string) map[string]interface{}); ok {
		r1 = rf(c, microservice)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(device.CommonService, string) error); ok {
		r2 = rf(c, microservice)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetAttrServer provides a mock function with given fields: c, microservice
func (_m *VerticalDeviceMock) SetAttrServer(c device.CommonService, microservice string) (int, map[string]interface{}, error) {
	ret := _m.Called(c, microservice)

	var r0 int
	if rf, ok := ret.Get(0).(func(device.CommonService, string) int); ok {
		r0 = rf(c, microservice)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(device.CommonService, string) map[string]interface{}); ok {
		r1 = rf(c, microservice)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(device.CommonService, string) error); ok {
		r2 = rf(c, microservice)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetAttrServerClient provides a mock function with given fields: c, microservice
func (_m *VerticalDeviceMock) SetAttrServerClient(c device.CommonService, microservice string) (int, map[string]interface{}, error) {
	ret := _m.Called(c, microservice)

	var r0 int
	if rf, ok := ret.Get(0).(func(device.CommonService, string) int); ok {
		r0 = rf(c, microservice)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(device.CommonService, string) map[string]interface{}); ok {
		r1 = rf(c, microservice)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(device.CommonService, string) error); ok {
		r2 = rf(c, microservice)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
