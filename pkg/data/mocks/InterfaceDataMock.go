// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// InterfaceDataMock is an autogenerated mock type for the InterfaceData type
type InterfaceDataMock struct {
	mock.Mock
}

// BodyDecodeToArray provides a mock function with given fields: contentBody
func (_m *InterfaceDataMock) BodyDecodeToArray(contentBody []byte) ([]interface{}, error) {
	ret := _m.Called(contentBody)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func([]byte) []interface{}); ok {
		r0 = rf(contentBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(contentBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BodyDecodeToMap provides a mock function with given fields: contentBody
func (_m *InterfaceDataMock) BodyDecodeToMap(contentBody []byte) (map[string]interface{}, error) {
	ret := _m.Called(contentBody)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func([]byte) map[string]interface{}); ok {
		r0 = rf(contentBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(contentBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BodyEncode provides a mock function with given fields: v
func (_m *InterfaceDataMock) BodyEncode(v interface{}) (*bytes.Buffer, error) {
	ret := _m.Called(v)

	var r0 *bytes.Buffer
	if rf, ok := ret.Get(0).(func(interface{}) *bytes.Buffer); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResponseDecodeToArray provides a mock function with given fields: v
func (_m *InterfaceDataMock) ResponseDecodeToArray(v interface{}) ([]interface{}, error) {
	ret := _m.Called(v)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(interface{}) []interface{}); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResponseDecodeToMap provides a mock function with given fields: v
func (_m *InterfaceDataMock) ResponseDecodeToMap(v interface{}) (map[string]interface{}, error) {
	ret := _m.Called(v)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(interface{}) map[string]interface{}); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendJSON provides a mock function with given fields: w, v
func (_m *InterfaceDataMock) SendJSON(w http.ResponseWriter, v interface{}) {
	_m.Called(w, v)
}
